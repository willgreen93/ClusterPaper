theme_classic() +
theme(legend.title = element_blank())
r
df
df$differentiable
df$differentiable %>% unique()
r <- ggplot(df %>% filter(differentiable=="piecewise log-linear"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank())
r
r <- ggplot(df %>% filter(differentiable=="piecewise log-linear"), aes(x=t, y=value)) +
geom_line(aes(color=flattening), size=1) +
theme_classic() +
theme(legend.title = element_blank())
r
vl_plot_flat$p
vl_plot_flat$q
ggsave(filename=paste0("PhD/Images/vl_plot_loglinear_flat.png"), plot = vl_plot_flat$r, device = "png", width=3.5, height=2.8)
vl_plot_flat <- vl_func(a=3, b=2, ctmin=20, ct_i=35, l=5)
vl_plot_flat$r
r
## vl kinetics comparison
vl_func <- function(a, b, ctmin, ct_i, l){
t <- seq(0,30,0.1)
tmax <- (ct_i-ctmin)/a
ct_nondiff      <- ifelse(t < tmax, ct_i - a*t, ctmin + b*(t-tmax))
ct_nondiff_flat <- ifelse(t < tmax, ct_i - a*t, ifelse(t<tmax+l, ctmin, ctmin + b*(t-tmax-l)))
ct_diff <-      ctmin-log((a+b)/(b*exp(-a*(t-tmax))+a*exp(b*(t-tmax))))
ct_diff_flat <- ctmin-log((a+b)/(b*exp(-a*(t-tmax))+a*exp(b*(t-tmax))+exp(l)))
df <- data.frame(t=t,
ct_nondiff=ct_nondiff,
ct_nondiff_flat=ct_nondiff_flat,
ct_diff=ct_diff,
ct_diff_flat=ct_diff_flat) %>%
tidyr::gather(param, value, 2:5) %>%
mutate(value=pmin(value, ct_i)) %>%
mutate(flattening=ifelse(grepl("flat", param), "flattened", "not flattened"),
differentiable=ifelse(grepl("nondiff", param), "piecewise log-linear", "differentiable"))
p <- ggplot(df, aes(x=t, y=value)) +
geom_line(aes(color=flattening), size=1) +
facet_wrap(~differentiable) +
theme_classic() +
theme(legend.title = element_blank())
q <- ggplot(df %>% filter(flattening=="not flattened"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank())
r <- ggplot(df %>% filter(differentiable=="piecewise log-linear"), aes(x=t, y=value)) +
geom_line(aes(color=flattening), size=1) +
theme_classic() +
theme(legend.title = element_blank())
return(list(p=p, q=q, r=r))
}
vl_plot_flat <- vl_func(a=3, b=2, ctmin=20, ct_i=35, l=5)
vl_plot_flat$r
ggsave(filename=paste0("PhD/Images/vl_plot_loglinear_flat.png"), plot = vl_plot_flat$r, device = "png", width=3.5, height=2.8)
ggsave(filename=paste0("PhD/Images/vl_plot_loglinear_flat.png"), plot = vl_plot_flat$r, device = "png", width=5.5, height=2.8)
library(ggplot2)
library(dplyr)
vl_func <- function(a, b, vlmax, tau){
t <- seq(0,35,0.01)
vl=(10^7)*((a+b)/(a*exp(b*(t-tau))+b*exp(-a*(t-tau))))
return(vl)
}
vl_func(0.8, 0.2, 8, 12)
vl_plot <- data.frame(t=seq(0,35,0.01),
vl=vl_func(0.8, 0.2, 8, 12)) %>%
mutate(phase=ifelse(t>28,"2",ifelse(lag(vl)<vl, "0", "1")))
filler <- "Pastel2"
vl_plot_out <- ggplot(vl_plot, aes(x=t, y=vl)) +
geom_area(aes(fill=phase)) +
scale_fill_brewer() +
scale_color_brewer() +
geom_line(aes(color=phase)) +
labs(y="viral load", size=20) +
labs(x="time since infection") +
scale_x_continuous(limits = c(0,35), expand = c(0, 0)) +
theme(axis.line = element_line(colour = "black"),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.y=element_blank(),
axis.text.x=element_blank(),
legend.position="none")
print(vl_plot_out)
vl_plot_out2 <- ggplot(vl_plot, aes(x=t, y=vl, alpha=1-t/35)) +
geom_col(fill="orangered3", width=0.01) +
scale_fill_brewer() +
scale_color_brewer() +
#geom_line(aes(color=phase)) +
labs(y="viral load", size=20) +
labs(x="time since infection") +
scale_x_continuous(limits = c(0,35), expand = c(0, 0)) +
theme(axis.line = element_line(colour = "black"),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.y=element_blank(),
axis.text.x=element_blank(),
legend.position="none") +
scale_alpha_identity()
vl_plot_out2
vl_biphasic <- c(dnorm(seq(8.01,14,0.01),10,0.2), dnorm(seq(6.01,10,0.01),10,0.12))
vl_shedding <- c(rep(0.1, 999),0.2)
xs <- seq(0.001,1,0.001)
contact_rate <- xs^2-5*xs+5
inf_prof <- data.frame(x=seq(1,1000,1), viral_load=vl_biphasic, viral_shedding=vl_shedding, contact_rate=contact_rate) %>% mutate(infectious=viral_load*viral_shedding*contact_rate) %>% tidyr::gather(param, value, 2:4)
a <- ggplot(inf_prof %>% mutate(param=factor(param, levels=c("viral_load", "viral_shedding", "contact_rate"))), aes(x=x, y=value)) +
geom_area(aes(fill=param, color=param)) +
facet_wrap(~param, ncol=1, scales="free_y") +
theme_bw() +
labs(x="time since infection") +
theme(axis.line = element_line(colour = "black"),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.text.x=element_blank(),
legend.position="none")
b <- ggplot(inf_prof %>% filter(param=="viral_load"), aes(x=x, y=infectious)) +
geom_area(fill="red") +
theme_bw() +
labs(x="time since infection") +
theme(axis.line = element_line(colour = "black"),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.text.x=element_blank(),
legend.position="none")
ggpubr::ggarrange(a, b, ncol=2)
## vl kinetics comparison
vl_func <- function(a, b, ctmin, ct_i, l){
t <- seq(0,30,0.1)
tmax <- (ct_i-ctmin)/a
ct_nondiff      <- ifelse(t < tmax, ct_i - a*t, ctmin + b*(t-tmax))
ct_nondiff_flat <- ifelse(t < tmax, ct_i - a*t, ifelse(t<tmax+l, ctmin, ctmin + b*(t-tmax-l)))
ct_diff <-      ctmin-log((a+b)/(b*exp(-a*(t-tmax))+a*exp(b*(t-tmax))))
ct_diff_flat <- ctmin-log((a+b)/(b*exp(-a*(t-tmax))+a*exp(b*(t-tmax))+exp(l)))
df <- data.frame(t=t,
ct_nondiff=ct_nondiff,
ct_nondiff_flat=ct_nondiff_flat,
ct_diff=ct_diff,
ct_diff_flat=ct_diff_flat) %>%
tidyr::gather(param, value, 2:5) %>%
mutate(value=pmin(value, ct_i)) %>%
mutate(flattening=ifelse(grepl("flat", param), "flattened", "not flattened"),
differentiable=ifelse(grepl("nondiff", param), "piecewise log-linear", "differentiable"))
p <- ggplot(df, aes(x=t, y=value)) +
geom_line(aes(color=flattening), size=1) +
facet_wrap(~differentiable) +
theme_classic() +
theme(legend.title = element_blank())
q <- ggplot(df %>% filter(flattening=="not flattened"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank())
r <- ggplot(df %>% filter(differentiable=="piecewise log-linear"), aes(x=t, y=value)) +
geom_line(aes(color=flattening), size=1) +
theme_classic() +
theme(legend.title = element_blank())
return(list(p=p, q=q, r=r))
}
vl_plot_flat <- vl_func(a=3, b=2, ctmin=20, ct_i=35, l=5)
vl_plot_flat
vl_plot_flat$p
vl_plot_flat$q
a=3
b=2
ctmin=20
ct_i=35
l=5
t <- seq(0,30,0.1)
tmax <- (ct_i-ctmin)/a
ct_nondiff      <- ifelse(t < tmax, ct_i - a*t, ctmin + b*(t-tmax))
ct_nondiff_flat <- ifelse(t < tmax, ct_i - a*t, ifelse(t<tmax+l, ctmin, ctmin + b*(t-tmax-l)))
ct_diff <-      ctmin-log((a+b)/(b*exp(-a*(t-tmax))+a*exp(b*(t-tmax))))
ct_diff_flat <- ctmin-log((a+b)/(b*exp(-a*(t-tmax))+a*exp(b*(t-tmax))+exp(l)))
df <- data.frame(t=t,
ct_nondiff=ct_nondiff,
ct_nondiff_flat=ct_nondiff_flat,
ct_diff=ct_diff,
ct_diff_flat=ct_diff_flat) %>%
tidyr::gather(param, value, 2:5) %>%
mutate(value=pmin(value, ct_i)) %>%
mutate(flattening=ifelse(grepl("flat", param), "flattened", "not flattened"),
differentiable=ifelse(grepl("nondiff", param), "piecewise log-linear", "differentiable"))
p <- ggplot(df, aes(x=t, y=value)) +
geom_line(aes(color=flattening), size=1) +
facet_wrap(~differentiable) +
theme_classic() +
theme(legend.title = element_blank())
q <- ggplot(df %>% filter(flattening=="not flattened"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank())
r <- ggplot(df %>% filter(differentiable=="piecewise log-linear"), aes(x=t, y=value)) +
geom_line(aes(color=flattening), size=1) +
theme_classic() +
theme(legend.title = element_blank())
r
q
q <- ggplot(df %>% filter(flattening=="not flattened"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank()) +
geom_vline(aes(x=5))
q
q <- ggplot(df %>% filter(flattening=="not flattened"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank()) +
geom_vline(x=5)
q <- ggplot(df %>% filter(flattening=="not flattened"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank()) +
geom_vline(xintercept=5, linetype="dashed")
q
q <- ggplot(df %>% filter(flattening=="not flattened"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank()) +
geom_vline(xintercept=5, linetype="dashed", size=2)
q
q <- ggplot(df %>% filter(flattening=="not flattened"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank()) +
geom_vline(xintercept=5, linetype="dashed", size=21)
q
q <- ggplot(df %>% filter(flattening=="not flattened"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank()) +
geom_vline(xintercept=5, linetype="dashed", size=1)
q
q <- ggplot(df %>% filter(flattening=="not flattened"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank()) +
geom_vline(xintercept=5, linetype="dashed", size=1, color="grey")
q
vl_plot_flat <- vl_func(a=3, b=2, ctmin=20, ct_i=35, l=5)
ggsave(filename=paste0("PhD/Images/vl_plot_diff.png"), plot = vl_plot_flat$q, device = "png", width=3.5, height=2.8)
## vl kinetics comparison
vl_func <- function(a, b, ctmin, ct_i, l){
t <- seq(0,30,0.1)
tmax <- (ct_i-ctmin)/a
ct_nondiff      <- ifelse(t < tmax, ct_i - a*t, ctmin + b*(t-tmax))
ct_nondiff_flat <- ifelse(t < tmax, ct_i - a*t, ifelse(t<tmax+l, ctmin, ctmin + b*(t-tmax-l)))
ct_diff <-      ctmin-log((a+b)/(b*exp(-a*(t-tmax))+a*exp(b*(t-tmax))))
ct_diff_flat <- ctmin-log((a+b)/(b*exp(-a*(t-tmax))+a*exp(b*(t-tmax))+exp(l)))
df <- data.frame(t=t,
ct_nondiff=ct_nondiff,
ct_nondiff_flat=ct_nondiff_flat,
ct_diff=ct_diff,
ct_diff_flat=ct_diff_flat) %>%
tidyr::gather(param, value, 2:5) %>%
mutate(value=pmin(value, ct_i)) %>%
mutate(flattening=ifelse(grepl("flat", param), "flattened", "not flattened"),
differentiable=ifelse(grepl("nondiff", param), "piecewise log-linear", "differentiable"))
p <- ggplot(df, aes(x=t, y=value)) +
geom_line(aes(color=flattening), size=1) +
facet_wrap(~differentiable) +
theme_classic() +
theme(legend.title = element_blank())
q <- ggplot(df %>% filter(flattening=="not flattened"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank()) +
geom_vline(xintercept=5, linetype="dashed", size=1, color="grey")
q
r <- ggplot(df %>% filter(differentiable=="piecewise log-linear"), aes(x=t, y=value)) +
geom_line(aes(color=flattening), size=1) +
theme_classic() +
theme(legend.title = element_blank())
return(list(p=p, q=q, r=r))
}
ggsave(filename=paste0("PhD/Images/vl_plot_diff.png"), plot = vl_plot_flat$q, device = "png", width=3.5, height=2.8)
## vl kinetics comparison
vl_func <- function(a, b, ctmin, ct_i, l){
t <- seq(0,30,0.1)
tmax <- (ct_i-ctmin)/a
ct_nondiff      <- ifelse(t < tmax, ct_i - a*t, ctmin + b*(t-tmax))
ct_nondiff_flat <- ifelse(t < tmax, ct_i - a*t, ifelse(t<tmax+l, ctmin, ctmin + b*(t-tmax-l)))
ct_diff <-      ctmin-log((a+b)/(b*exp(-a*(t-tmax))+a*exp(b*(t-tmax))))
ct_diff_flat <- ctmin-log((a+b)/(b*exp(-a*(t-tmax))+a*exp(b*(t-tmax))+exp(l)))
df <- data.frame(t=t,
ct_nondiff=ct_nondiff,
ct_nondiff_flat=ct_nondiff_flat,
ct_diff=ct_diff,
ct_diff_flat=ct_diff_flat) %>%
tidyr::gather(param, value, 2:5) %>%
mutate(value=pmin(value, ct_i)) %>%
mutate(flattening=ifelse(grepl("flat", param), "flattened", "not flattened"),
differentiable=ifelse(grepl("nondiff", param), "piecewise log-linear", "differentiable"))
p <- ggplot(df, aes(x=t, y=value)) +
geom_line(aes(color=flattening), size=1) +
facet_wrap(~differentiable) +
theme_classic() +
theme(legend.title = element_blank())
q <- ggplot(df %>% filter(flattening=="not flattened"), aes(x=t, y=value)) +
geom_line(aes(color=differentiable), size=1) +
theme_classic() +
theme(legend.title = element_blank()) +
geom_vline(xintercept=5, linetype="dashed", size=1, color="grey")
q
r <- ggplot(df %>% filter(differentiable=="piecewise log-linear"), aes(x=t, y=value)) +
geom_line(aes(color=flattening), size=1) +
theme_classic() +
theme(legend.title = element_blank())
return(list(p=p, q=q, r=r))
}
vl_plot_flat <- vl_func(a=3, b=2, ctmin=20, ct_i=35, l=5)
ggsave(filename=paste0("PhD/Images/vl_plot_diff.png"), plot = vl_plot_flat$q, device = "png", width=3.5, height=2.8)
vl_plot_flat$q
ggsave(filename=paste0("PhD/Images/vl_plot_diff.png"), plot = vl_plot_flat$q, device = "png", width=7, height=2.8)
getwd()
setwd("~/ClusterPaper")
a <- readRDS("delta/react/react_delta__incidence_MH_ignored_7,8__vg=6_10000_2024-03-20_mult2.rds")
plot(a$MCMC_posteriors[1:10000], type="l")
plot(a$MCMC_posteriors[5000:10000], type="l")
plot(a$MCMC_output[5000:10000,1], type="l")
plot(a$MCMC_output[5000:10000,10], type="l")
a$Acceptances[5000:10000]
a$Acceptances[5000:10000] %>% sum()
a$Acceptances[5000:10000] %>% dplyr::sum()
sum(a$Acceptances[5000:10000])
sum(a$Acceptances[5000:10000], na.rm=T)
for(i in 1:ncol(a$MCMC_output)) print(length(unique(a$MCMC_output[,i])))
x <- a$x
a$parameters <- a$MCMC_output[10000,]
a$parameters
x$parameters <- a$MCMC_output[10000,]
x$proposal_type <- "Cov"
x$cov_matrix <- cov(a$MCMC_output[5000:10000,])*(2.38^2)/length(x$parameters)
x$cov_matrix
x$ncores
x$ncores <- 2
n_iterations <- x$n_iterations
parameters <- x$parameters
vl_kinetics_type <- x$vl_kinetics_type
knots <- x$knots
population <- x$population
data_array_raw <- x$data_array
test_pop <- x$test_pop
MCMC_sds <- x$MCMC_sds
prior_mean <- x$prior_mean
prior_sds <- x$prior_sds
ncores <- x$ncores
proposal_type <- x$proposal_type
cov_matrix <- x$cov_matrix
form <- x$form
tag <- x$tag
strain <- x$strain
max_inf <- x$max_inf
symp_delay_lim <- x$symp_delay_lim
max_day <- x$max_day
ignored_spline_par <- x$ignored_spline_par
cov_start <- x$cov_start
gene <- x$gene
days <- x$days
dates <- x$dates
n_days <- x$n_days
vls <- x$vls
n_vls <- x$n_vls
n_test_days <- x$n_test_days
test_days <- x$test_days
n_parameters <- x$n_parameters
ignored_pars <- x$ignored_pars
vg <- x$vg
prior_cov_final <- x$prior_cov_final
lower_bound <- x$lower_bound
Rcpp::sourceCpp("will3p_inc_vl_reduced.cpp")
Rcpp::sourceCpp("will3p_peak_vl_reduced.cpp")
Rcpp::sourceCpp("will3p_thresh_vl_reduced2.cpp")
Rcpp::sourceCpp("will3p_thresh_peak_vl_reduced2.cpp")
source("key_functions_simplified.R")
if(length(dim(data_array_raw))==3) data_array <- weekly_aggregator(daily_array=data_array_raw)
if(length(dim(data_array_raw))==2) data_array <- data_array_raw
## posterior function
posterior <- function(parameters, prior_mean, prior_cov_final, lower_bound, knots, vk, vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim, ignored_pars){
a <- prior(parameters, prior_mean, prior_cov_final, lower_bound, form, ignored_pars)
if(a==-Inf) return(-Inf)
if(length(dim(data_array))==3) b <- likelihood_function3(parameters, knots, vk, vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim)
if(length(dim(data_array))==2) b <- likelihood_REACT(parameters, knots, vk, vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim)
if(is.nan(b)) b <- -Inf
return(c(a+b,b))
}
## proposal function
proposal <- function(parameters, iteration, MCMC_sds, proposal_type, cov_matrix, ignored_pars, ignored_spline_par){
if(proposal_type == "MH"){
param_interest <- (iteration-1) %% length(parameters) + 1
new_param <- rnorm(n=1, mean=parameters[param_interest], sd=MCMC_sds[param_interest])
parameters[param_interest] <- new_param
}
if(proposal_type == "Cov"){
output <- c(mvtnorm::rmvnorm(n=1, mean=parameters, sigma=cov_matrix))
names(output) <- names(parameters)
output[ignored_spline_par] <- parameters[ignored_spline_par]
output[ignored_pars] <- parameters[ignored_pars]
#if(test_form=='empirical') output[c('test1', 'test2')] <- parameters[c('test1', 'test2')]
parameters <- output
}
return(parameters)
}
MCMC_output <- matrix(nrow = n_iterations + 1, ncol = n_parameters)
MCMC_output[1,] <- parameters
colnames(MCMC_output) <- names(parameters)
vk <- 1
p <- proc.time()
current_posterior <- posterior(parameters, prior_mean, prior_cov_final, lower_bound, knots, vk=vk, vg=vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim, ignored_pars)
current_posterior
a$MCMC_posteriors[10000]
print((proc.time()-p)["elapsed"])
MCMC_posteriors <- matrix(nrow=n_iterations + 1, ncol=1)
MCMC_likelihoods <- matrix(nrow=n_iterations + 1, ncol=1)
MCMC_posteriors[1] <- current_posterior[1]
MCMC_likelihoods[1] <- current_posterior[2]
Acceptances <- vector(length=n_iterations)
time_vec <- vector(length=n_iterations)
for(i in 1:n_iterations){
if(i > 10000) test_pop <- 1e7
p <- proc.time()
cat("\n")
param_interest <- (i-1) %% n_parameters + 1
print(i)
print(param_interest)
if(proposal_type=="MH" && (i %% n_parameters %in% c(ignored_spline_par,ignored_pars))){
print("Rejected", quote=F)
MCMC_output[i+1,] <- MCMC_output[i,]
Acceptances[i] <- NA
MCMC_posteriors[i+1] <- MCMC_posteriors[i]
MCMC_likelihoods[i+1] <- MCMC_likelihoods[i]
next
}
if(i >= cov_start) proposal_type <- "Cov"
if(i == cov_start) cov_matrix <- cov(MCMC_output[(i-10000):i,])*(2.38^2)/n_parameters
if((proposal_type == "Cov") & (i %% 10000 == 0) & (i > 20000)) cov_matrix <- cov(MCMC_output[(i-10000):i,])*(2.38^2)/n_parameters
current_parameters <- MCMC_output[i,]
current_posterior <- MCMC_posteriors[i]
proposed_parameters <- proposal(parameters=current_parameters,iteration=i,MCMC_sds=MCMC_sds,proposal_type=proposal_type, cov_matrix=cov_matrix, ignored_pars=ignored_pars, ignored_spline_par=ignored_spline_par)
print(c("proposed parameters = ", proposed_parameters), quote=F)
#saveRDS(proposed_parameters, paste0("parameters_break_",form,".rds"))
#proposed_parameters <- readRDS("parameters_break.rds")
posterior_calc <- posterior(parameters=proposed_parameters, prior_mean, prior_cov_final, lower_bound, knots, vk, vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim, ignored_pars)
proposed_posterior <- posterior_calc[1]
proposed_likelihood <- posterior_calc[2]
#print(c("current posterior = ", current_posterior), quote=FALSE)
print(c("proposed posterior = ", proposed_posterior), quote=FALSE)
print(c("proposed likelihood = ", proposed_likelihood), quote=FALSE)
likelihood_ratio <- ifelse(proposed_posterior == -Inf || is.nan(proposed_posterior), 0, exp(proposed_posterior-current_posterior))
if(runif(1) < likelihood_ratio){
print("Accepted", quote=F)
MCMC_output[i+1,] <- proposed_parameters
MCMC_posteriors[i+1] <- proposed_posterior
MCMC_likelihoods[i+1] <- proposed_likelihood
Acceptances[i] <- 1
}
else{
print("Rejected", quote=F)
MCMC_output[i+1,] <- MCMC_output[i,]
Acceptances[i] <- 0
if(runif(1) < 0.01){
calc_posterior <- posterior(current_parameters, prior_mean, prior_cov_final, lower_bound, knots, vk, vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim, ignored_pars)
MCMC_posteriors[i+1] <- calc_posterior[1]
MCMC_likelihoods[i+1] <- calc_posterior[2]
}
else{
MCMC_posteriors[i+1] <- MCMC_posteriors[i]
MCMC_likelihoods[i+1] <- MCMC_likelihoods[i]
}
}
print(c("Last accepted = ", max(which(Acceptances==1))), quote=F)
print(c("Acceptance rate =", round(sum(Acceptances[1:i], na.rm=T)/i,2)), quote=F)
if(i %% 5000 == 0){
Acceptances_vec <- vector(length=n_parameters)
for(j in 1:length(Acceptances_vec)){
Acceptances_param <- Acceptances[seq(j,i,n_parameters)]
n_accept_param <- sum(Acceptances_param, na.rm=T)
n_it_param <- length(Acceptances_param[is.na(Acceptances_param)==FALSE])
Acceptances_vec[j] <- n_accept_param/n_it_param
}
names(Acceptances_vec) <- names(parameters)
print(Acceptances_vec, quote=F)
folder <- ifelse(length(dim(data_array))==2, "react", "")
folder2 <- ifelse(length(dim(data_array))==2, "react_", "")
saveRDS(list(MCMC_output=MCMC_output, MCMC_posteriors=MCMC_posteriors, MCMC_likelihoods=MCMC_likelihoods, Acceptances=Acceptances, cov_matrix=cov_matrix, time_vec=time_vec, x=x),
file=paste0(strain,"/",folder,"/",folder2,strain,"_",gene,"_",form,"_",proposal_type,"_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_",format(i,scientific=F),"_",Sys.Date(),"_mult2.rds"))
unlink(paste0(strain,"/",folder,"/",folder2,strain,"_",gene,"_",form,"_",proposal_type,"_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_",format(i-5000,scientific=F),"_",Sys.Date(),"_mult2.rds"))
unlink(paste0(strain,"/",folder,"/",folder2,strain,"_",gene,"_",form,"_",proposal_type,"_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_",format(i-10000,scientific=F),"_",Sys.Date(),"_mult2.rds"))
unlink(paste0(strain,"/",folder,"/",folder2,strain,"_",gene,"_",form,"_",proposal_type,"_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_",format(i-15000,scientific=F),"_",Sys.Date(),"_mult2.rds"))
unlink(paste0(strain,"/",folder,"/",folder2,strain,"_",gene,"_",form,"_MH",            "_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_",format(i- 5000,scientific=F),"_",Sys.Date(),"_mult2.rds"))
unlink(paste0(strain,"/",folder,"/",folder2,strain,"_",gene,"_",form,"_",proposal_type,"_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_",format(i- 5000,scientific=F),"_",Sys.Date()-1,"_mult2.rds"))
}
print((proc.time()-p)["elapsed"])
time_vec[i] <- ((proc.time()-p)["elapsed"])
}
a <- readRDS("delta/react/react_delta__incidence_Cov_ignored_7,8__vg=6_95000_2024-03-22_mult2.rds")
plot(a$MCMC_posteriors[1:95000], type="l")
plot(a$MCMC_output[1:95000,1], type="l")
plot(a$MCMC_output[1:95000,2], type="l")
plot(a$MCMC_output[1:95000,4], type="l")
plot(a$MCMC_output[1:95000,6], type="l")
plot(a$MCMC_output[1:95000,8], type="l")
plot(a$MCMC_output[1:95000,10], type="l")
plot(a$MCMC_output[1:95000,12], type="l")
plot(a$MCMC_output[1:95000,14], type="l")
