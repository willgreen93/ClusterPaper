for(j in start_j:max_day){
p_array[,j,] <- t(c(infecteds[j:(j-max_test_day)]*test_delay) * p_ct_tau_mat[1:(max_test_day+1),(ncol(p_ct_tau_mat)-1):1])
}
}
dimnames(p_array) = list(as.numeric(vl_vec[-1]),1:max_day,0:max_test_day)
return(list(p_array, p_ct_tau_mat))
}
p_array_func <- function(parameters, knots, vk, vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim, stoch=0.5, name=F){
if(length(dim(data_array))==3){
max_test_day <- dim(data_array)[3]-1
max_inf <- 2*(max_test_day+14)+1
}
if(length(dim(data_array)==2)) max_inf <- 30
inf_lims <- floor(max_inf/2)
### CHANGE THIS
vl_vec <- as.numeric(substr(rownames(data_array), 4, nchar(rownames(data_array))))
vl_range <- vl_vec[c(1,length(vl_vec))]
vl_vec[1]="negative"
theta_start <- which(names(parameters)=="theta1")
thetas <- thetas_generator(parameters)[theta_start:(length(parameters)-1)]
## EXTRACT PARAMS
inc <- parameters[c('inc1','inc2','inc3')]
test_param <- c(parameters[grepl("test",names(parameters))],test6=1)
#test_delay <- c(test_param, test6=max(0,1-sum(test_param)))
test_delay <- setNames(vector(length=length(test_param)), names(test_param))
test_delay[1] = test_param[1]
for (i in 2:length(test_delay)) test_delay[i] <- prod(1-test_param[1:(i-1)])*test_param[i]
pseeds = unlist(dqrng::generateSeedVectors(ncores,1))
if(form=="incidence"){
days <- 0:max_inf
infecteds <- infecteds_generator(parameters, knots, population, max_day, form) # generate infecteds
inc_period <- setNames(fGarch::psnorm(0:symp_delay_lim, mean=inc[1], sd=inc[2], xi=exp(inc[3]))-fGarch::psnorm(0:symp_delay_lim-1, mean=inc[1], sd=inc[2], xi=exp(inc[3])),0:symp_delay_lim)
p_ct_tau_mat <- ct_func2_cpp_inc(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
dimnames(p_ct_tau_mat) <- list(0:(max_inf-1), rev(vl_vec))
start_j = 35
#print(t(round(p_ct_tau_mat),2)
}
if(form=="peak"){
days <- -symp_delay_lim:symp_delay_lim
infecteds <- infecteds_generator(parameters, knots, population, max_day, form, inf_lims=inf_lims) # generate infecteds
peak_to_symp <- setNames(fGarch::psnorm(days, mean=inc[1], sd=inc[2], xi=exp(inc[3]))-fGarch::psnorm(days-1, mean=inc[1], sd=inc[2], xi=exp(inc[3])),days)
p_ct_tau_mat <- ct_func2_cpp_all(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
dimnames(p_ct_tau_mat) <- list(-inf_lims:inf_lims, rev(vl_vec))
start_j = 21
#round(t(p_ct_tau_mat),2)
}
if(form %in% c("thresh","thresh_peak")){
days <- 0:max_inf
infecteds <- infecteds_generator(parameters, knots, population, max_day, form) # generate infecteds
if(form=="thresh") p_ct_tau_mat <- ct_func2_cpp_thresh(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], t=parameters[c(9,10,11)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
if(form=="thresh_peak") p_ct_tau_mat <- ct_func2_cpp_thresh_peak(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], t=parameters[c(9,10,11)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
dimnames(p_ct_tau_mat) <- list(0:(max_inf-1), rev(vl_vec))
start_j = 35
round(t(p_ct_tau_mat),2)
}
if(length(dim(data_array))==2) return(p_ct_tau_mat)
else{
## CALCULATE p_ct_tau
p_array <- array(NA, dim=c(length(vl_vec)-1, max_day, max_test_day+1))
# generate an array where the row pertains to ct value, the column to calendar day and the slice to days since onset
if(form %in% c("incidence", "peak")){
for(j in start_j:max_day) for(k in 0:(dim(p_array)[3]-1)){
if(form=="incidence") p_array[,j,k+1] <- t(c(infecteds[(j-k):(j-k-symp_delay_lim)]*inc_period[1:(symp_delay_lim+1)]*test_delay[k+1]))%*%p_ct_tau_mat[(k+1):(k+symp_delay_lim+1),(ncol(p_ct_tau_mat)-1):1]
if(form=="peak")      p_array[,j,k+1] <- t(c(infecteds[(j-symp_delay_lim-k):(j+symp_delay_lim-k)]*rev(peak_to_symp)*test_delay[k+1]))%*%p_ct_tau_mat[(inf_lims+1+symp_delay_lim+k):(inf_lims+1-symp_delay_lim+k),(ncol(p_ct_tau_mat)-1):1]
}
}
if(form %in% c("thresh", "thresh_peak")){
for(j in start_j:max_day){
p_array[,j,] <- t(c(infecteds[j:(j-max_test_day)]*test_delay) * p_ct_tau_mat[1:(max_test_day+1),(ncol(p_ct_tau_mat)-1):1])
}
}
dimnames(p_array) = list(as.numeric(vl_vec[-1]),1:max_day,0:max_test_day)
return(list(p_array, p_ct_tau_mat))
}
}
## CALCULATE p_ct_tau
p_array <- array(NA, dim=c(length(vl_vec)-1, max_day, max_test_day+1))
# generate an array where the row pertains to ct value, the column to calendar day and the slice to days since onset
if(form %in% c("incidence", "peak")){
for(j in start_j:max_day) for(k in 0:(dim(p_array)[3]-1)){
if(form=="incidence") p_array[,j,k+1] <- t(c(infecteds[(j-k):(j-k-symp_delay_lim)]*inc_period[1:(symp_delay_lim+1)]*test_delay[k+1]))%*%p_ct_tau_mat[(k+1):(k+symp_delay_lim+1),(ncol(p_ct_tau_mat)-1):1]
if(form=="peak")      p_array[,j,k+1] <- t(c(infecteds[(j-symp_delay_lim-k):(j+symp_delay_lim-k)]*rev(peak_to_symp)*test_delay[k+1]))%*%p_ct_tau_mat[(inf_lims+1+symp_delay_lim+k):(inf_lims+1-symp_delay_lim+k),(ncol(p_ct_tau_mat)-1):1]
}
}
symp_delay_lim
if(form=="incidence"){
days <- 0:max_inf
infecteds <- infecteds_generator(parameters, knots, population, max_day, form) # generate infecteds
inc_period <- setNames(fGarch::psnorm(0:symp_delay_lim, mean=inc[1], sd=inc[2], xi=exp(inc[3]))-fGarch::psnorm(0:symp_delay_lim-1, mean=inc[1], sd=inc[2], xi=exp(inc[3])),0:symp_delay_lim)
p_ct_tau_mat <- ct_func2_cpp_inc(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
dimnames(p_ct_tau_mat) <- list(0:(max_inf-1), rev(vl_vec))
start_j = 35
#print(t(round(p_ct_tau_mat),2)
}
p_ct_tau_mat
vl_range
max_inf-1
length(dim(data_array)==2)
length(dim(data_array))==2
if(length(dim(data_array))==3){
max_test_day <- dim(data_array)[3]-1
max_inf <- 2*(max_test_day+14)+1
}
if(length(dim(data_array))==2) max_inf <- 30
inf_lims <- floor(max_inf/2)
### CHANGE THIS
vl_vec <- as.numeric(substr(rownames(data_array), 4, nchar(rownames(data_array))))
vl_range <- vl_vec[c(1,length(vl_vec))]
vl_vec[1]="negative"
theta_start <- which(names(parameters)=="theta1")
thetas <- thetas_generator(parameters)[theta_start:(length(parameters)-1)]
## EXTRACT PARAMS
inc <- parameters[c('inc1','inc2','inc3')]
test_param <- c(parameters[grepl("test",names(parameters))],test6=1)
test_delay <- setNames(vector(length=length(test_param)), names(test_param))
test_delay[1] = test_param[1]
for (i in 2:length(test_delay)) test_delay[i] <- prod(1-test_param[1:(i-1)])*test_param[i]
pseeds = unlist(dqrng::generateSeedVectors(ncores,1))
if(form=="incidence"){
days <- 0:max_inf
infecteds <- infecteds_generator(parameters, knots, population, max_day, form) # generate infecteds
inc_period <- setNames(fGarch::psnorm(0:symp_delay_lim, mean=inc[1], sd=inc[2], xi=exp(inc[3]))-fGarch::psnorm(0:symp_delay_lim-1, mean=inc[1], sd=inc[2], xi=exp(inc[3])),0:symp_delay_lim)
p_ct_tau_mat <- ct_func2_cpp_inc(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
dimnames(p_ct_tau_mat) <- list(0:(max_inf-1), rev(vl_vec))
start_j = 35
#print(t(round(p_ct_tau_mat),2)
}
if(form=="peak"){
days <- -symp_delay_lim:symp_delay_lim
infecteds <- infecteds_generator(parameters, knots, population, max_day, form, inf_lims=inf_lims) # generate infecteds
peak_to_symp <- setNames(fGarch::psnorm(days, mean=inc[1], sd=inc[2], xi=exp(inc[3]))-fGarch::psnorm(days-1, mean=inc[1], sd=inc[2], xi=exp(inc[3])),days)
p_ct_tau_mat <- ct_func2_cpp_all(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
dimnames(p_ct_tau_mat) <- list(-inf_lims:inf_lims, rev(vl_vec))
start_j = 21
#round(t(p_ct_tau_mat),2)
}
if(form %in% c("thresh","thresh_peak")){
days <- 0:max_inf
infecteds <- infecteds_generator(parameters, knots, population, max_day, form) # generate infecteds
if(form=="thresh") p_ct_tau_mat <- ct_func2_cpp_thresh(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], t=parameters[c(9,10,11)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
if(form=="thresh_peak") p_ct_tau_mat <- ct_func2_cpp_thresh_peak(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], t=parameters[c(9,10,11)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
dimnames(p_ct_tau_mat) <- list(0:(max_inf-1), rev(vl_vec))
start_j = 35
round(t(p_ct_tau_mat),2)
}
if(length(dim(data_array))==2) return(p_ct_tau_mat)
else{
## CALCULATE p_ct_tau
p_array <- array(NA, dim=c(length(vl_vec)-1, max_day, max_test_day+1))
# generate an array where the row pertains to ct value, the column to calendar day and the slice to days since onset
if(form %in% c("incidence", "peak")){
for(j in start_j:max_day) for(k in 0:(dim(p_array)[3]-1)){
if(form=="incidence") p_array[,j,k+1] <- t(c(infecteds[(j-k):(j-k-symp_delay_lim)]*inc_period[1:(symp_delay_lim+1)]*test_delay[k+1]))%*%p_ct_tau_mat[(k+1):(k+symp_delay_lim+1),(ncol(p_ct_tau_mat)-1):1]
if(form=="peak")      p_array[,j,k+1] <- t(c(infecteds[(j-symp_delay_lim-k):(j+symp_delay_lim-k)]*rev(peak_to_symp)*test_delay[k+1]))%*%p_ct_tau_mat[(inf_lims+1+symp_delay_lim+k):(inf_lims+1-symp_delay_lim+k),(ncol(p_ct_tau_mat)-1):1]
}
}
if(form %in% c("thresh", "thresh_peak")){
for(j in start_j:max_day){
p_array[,j,] <- t(c(infecteds[j:(j-max_test_day)]*test_delay) * p_ct_tau_mat[1:(max_test_day+1),(ncol(p_ct_tau_mat)-1):1])
}
}
dimnames(p_array) = list(as.numeric(vl_vec[-1]),1:max_day,0:max_test_day)
return(list(p_array, p_ct_tau_mat))
}
p_array_func <- function(parameters, knots, vk, vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim, stoch=0.5, name=F){
if(length(dim(data_array))==3){
max_test_day <- dim(data_array)[3]-1
max_inf <- 2*(max_test_day+14)+1
}
if(length(dim(data_array))==2) max_inf <- 30
inf_lims <- floor(max_inf/2)
### CHANGE THIS
vl_vec <- as.numeric(substr(rownames(data_array), 4, nchar(rownames(data_array))))
vl_range <- vl_vec[c(1,length(vl_vec))]
vl_vec[1]="negative"
theta_start <- which(names(parameters)=="theta1")
thetas <- thetas_generator(parameters)[theta_start:(length(parameters)-1)]
## EXTRACT PARAMS
inc <- parameters[c('inc1','inc2','inc3')]
test_param <- c(parameters[grepl("test",names(parameters))],test6=1)
#test_delay <- c(test_param, test6=max(0,1-sum(test_param)))
test_delay <- setNames(vector(length=length(test_param)), names(test_param))
test_delay[1] = test_param[1]
for (i in 2:length(test_delay)) test_delay[i] <- prod(1-test_param[1:(i-1)])*test_param[i]
pseeds = unlist(dqrng::generateSeedVectors(ncores,1))
if(form=="incidence"){
days <- 0:max_inf
infecteds <- infecteds_generator(parameters, knots, population, max_day, form) # generate infecteds
inc_period <- setNames(fGarch::psnorm(0:symp_delay_lim, mean=inc[1], sd=inc[2], xi=exp(inc[3]))-fGarch::psnorm(0:symp_delay_lim-1, mean=inc[1], sd=inc[2], xi=exp(inc[3])),0:symp_delay_lim)
p_ct_tau_mat <- ct_func2_cpp_inc(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
dimnames(p_ct_tau_mat) <- list(0:(max_inf-1), rev(vl_vec))
start_j = 35
#print(t(round(p_ct_tau_mat),2)
}
if(form=="peak"){
days <- -symp_delay_lim:symp_delay_lim
infecteds <- infecteds_generator(parameters, knots, population, max_day, form, inf_lims=inf_lims) # generate infecteds
peak_to_symp <- setNames(fGarch::psnorm(days, mean=inc[1], sd=inc[2], xi=exp(inc[3]))-fGarch::psnorm(days-1, mean=inc[1], sd=inc[2], xi=exp(inc[3])),days)
p_ct_tau_mat <- ct_func2_cpp_all(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
dimnames(p_ct_tau_mat) <- list(-inf_lims:inf_lims, rev(vl_vec))
start_j = 21
#round(t(p_ct_tau_mat),2)
}
if(form %in% c("thresh","thresh_peak")){
days <- 0:max_inf
infecteds <- infecteds_generator(parameters, knots, population, max_day, form) # generate infecteds
if(form=="thresh") p_ct_tau_mat <- ct_func2_cpp_thresh(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], t=parameters[c(9,10,11)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
if(form=="thresh_peak") p_ct_tau_mat <- ct_func2_cpp_thresh_peak(a=parameters[c(1,2)], b=parameters[c(3,4)], c=parameters[c(5,6)], l=parameters[c(7,8)], t=parameters[c(9,10,11)], p=c(max_inf-1, vl_range[1], vl_range[2], test_pop), nthreads=ncores, pseeds=pseeds, vg=vg, vk, vt=1, stoch=stoch)
dimnames(p_ct_tau_mat) <- list(0:(max_inf-1), rev(vl_vec))
start_j = 35
round(t(p_ct_tau_mat),2)
}
if(length(dim(data_array))==2) return(p_ct_tau_mat)
else{
## CALCULATE p_ct_tau
p_array <- array(NA, dim=c(length(vl_vec)-1, max_day, max_test_day+1))
# generate an array where the row pertains to ct value, the column to calendar day and the slice to days since onset
if(form %in% c("incidence", "peak")){
for(j in start_j:max_day) for(k in 0:(dim(p_array)[3]-1)){
if(form=="incidence") p_array[,j,k+1] <- t(c(infecteds[(j-k):(j-k-symp_delay_lim)]*inc_period[1:(symp_delay_lim+1)]*test_delay[k+1]))%*%p_ct_tau_mat[(k+1):(k+symp_delay_lim+1),(ncol(p_ct_tau_mat)-1):1]
if(form=="peak")      p_array[,j,k+1] <- t(c(infecteds[(j-symp_delay_lim-k):(j+symp_delay_lim-k)]*rev(peak_to_symp)*test_delay[k+1]))%*%p_ct_tau_mat[(inf_lims+1+symp_delay_lim+k):(inf_lims+1-symp_delay_lim+k),(ncol(p_ct_tau_mat)-1):1]
}
}
if(form %in% c("thresh", "thresh_peak")){
for(j in start_j:max_day){
p_array[,j,] <- t(c(infecteds[j:(j-max_test_day)]*test_delay) * p_ct_tau_mat[1:(max_test_day+1),(ncol(p_ct_tau_mat)-1):1])
}
}
dimnames(p_array) = list(as.numeric(vl_vec[-1]),1:max_day,0:max_test_day)
return(list(p_array, p_ct_tau_mat))
}
}
## CALCULATE p_ct_tau
p_array <- array(NA, dim=c(length(vl_vec)-1, max_day, max_test_day+1))
p_array
# generate an array where the row pertains to ct value, the column to calendar day and the slice to days since onset
if(form %in% c("incidence", "peak")){
for(j in start_j:max_day) for(k in 0:(dim(p_array)[3]-1)){
if(form=="incidence") p_array[,j,k+1] <- t(c(infecteds[(j-k):(j-k-symp_delay_lim)]*inc_period[1:(symp_delay_lim+1)]*test_delay[k+1]))%*%p_ct_tau_mat[(k+1):(k+symp_delay_lim+1),(ncol(p_ct_tau_mat)-1):1]
if(form=="peak")      p_array[,j,k+1] <- t(c(infecteds[(j-symp_delay_lim-k):(j+symp_delay_lim-k)]*rev(peak_to_symp)*test_delay[k+1]))%*%p_ct_tau_mat[(inf_lims+1+symp_delay_lim+k):(inf_lims+1-symp_delay_lim+k),(ncol(p_ct_tau_mat)-1):1]
}
}
p_array
n_iterations <- x$n_iterations
parameters <- x$parameters
vl_kinetics_type <- x$vl_kinetics_type
knots <- x$knots
population <- x$population
data_array_raw <- x$data_array
test_pop <- x$test_pop
MCMC_sds <- x$MCMC_sds
prior_mean <- x$prior_mean
prior_sds <- x$prior_sds
ncores <- x$ncores
proposal_type <- x$proposal_type
cov_matrix <- x$cov_matrix
form <- x$form
tag <- x$tag
strain <- x$strain
max_inf <- x$max_inf
symp_delay_lim <- x$symp_delay_lim
max_day <- x$max_day
ignored_spline_par <- x$ignored_spline_par
cov_start <- x$cov_start
gene <- x$gene
days <- x$days
dates <- x$dates
n_days <- x$n_days
vls <- x$vls
n_vls <- x$n_vls
n_test_days <- x$n_test_days
test_days <- x$test_days
n_parameters <- x$n_parameters
ignored_pars <- x$ignored_pars
vg <- x$vg
prior_cov_final <- x$prior_cov_final
lower_bound <- x$lower_bound
Rcpp::sourceCpp("will3p_inc_vl_reduced.cpp")
Rcpp::sourceCpp("will3p_vlmax_vl_reduced.cpp")
Rcpp::sourceCpp("will3p_thresh_vl_reduced.cpp")
Rcpp::sourceCpp("will3p_thresh_peak_vl_reduced.cpp")
source("key_functions_simplified.R")
if(length(dim(data_array))==3) data_array <- weekly_aggregator(daily_array=data_array_raw)
if(length(dim(data_array))==2) data_array <- data_array_raw
## posterior function
posterior <- function(parameters, prior_mean, prior_cov_final, lower_bound, knots, vk, vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim, ignored_pars){
a <- prior(parameters, prior_mean, prior_cov_final, lower_bound, form, ignored_pars)
if(a==-Inf) return -Inf
if(length(dim(data_array))==3) b <- likelihood_function3(parameters, knots, vk, vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim)
if(length(dim(data_array))==2) b <- likelihood_REACT(parameters, knots, vk, vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim)
if(is.nan(b)) b <- -Inf
return(c(a+b,b))
}
## proposal function
proposal <- function(parameters, iteration, MCMC_sds, proposal_type, cov_matrix, ignored_pars, ignored_spline_par){
if(proposal_type == "MH"){
param_interest <- (iteration-1) %% length(parameters) + 1
new_param <- rnorm(n=1, mean=parameters[param_interest], sd=MCMC_sds[param_interest])
parameters[param_interest] <- new_param
}
if(proposal_type == "Cov"){
output <- c(mvtnorm::rmvnorm(n=1, mean=parameters, sigma=cov_matrix))
names(output) <- names(parameters)
output[ignored_spline_par] <- parameters[ignored_spline_par]
output[ignored_pars] <- parameters[ignored_pars]
#if(test_form=='empirical') output[c('test1', 'test2')] <- parameters[c('test1', 'test2')]
parameters <- output
}
return(parameters)
}
MCMC_output <- matrix(nrow = n_iterations + 1, ncol = n_parameters)
MCMC_output[1,] <- parameters
colnames(MCMC_output) <- names(parameters)
vk <- 1
p <- proc.time()
current_posterior <- posterior(parameters, prior_mean, prior_cov_final, lower_bound, knots, vk=vk, vg=vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim, ignored_pars)
current_posterior
print((proc.time()-p)["elapsed"])
MCMC_posteriors <- matrix(nrow=n_iterations + 1, ncol=1)
MCMC_likelihoods <- matrix(nrow=n_iterations + 1, ncol=1)
MCMC_posteriors[1] <- current_posterior[1]
MCMC_likelihoods[1] <- current_posterior[2]
Acceptances <- vector(length=n_iterations)
time_vec <- vector(length=n_iterations)
for(i in 1:n_iterations){
if(i > 10000) test_pop <- 1e7
p <- proc.time()
cat("\n")
param_interest <- (i-1) %% n_parameters + 1
print(i)
print(param_interest)
if(proposal_type=="MH" && (i %% n_parameters %in% c(ignored_spline_par,ignored_pars))){
print("Rejected", quote=F)
MCMC_output[i+1,] <- MCMC_output[i,]
Acceptances[i] <- NA
MCMC_posteriors[i+1] <- MCMC_posteriors[i]
MCMC_likelihoods[i+1] <- MCMC_likelihoods[i]
next
}
if(i >= cov_start) proposal_type <- "Cov"
if(i == cov_start) cov_matrix <- cov(MCMC_output[(i-20000):i,])*(2.38^2)/n_parameters
if((proposal_type == "Cov") & (i %% 10000 == 0) & (i > 20000)) cov_matrix <- cov(MCMC_output[(i-10000):i,])*(2.38^2)/n_parameters
current_parameters <- MCMC_output[i,]
current_posterior <- MCMC_posteriors[i]
proposed_parameters <- proposal(parameters=current_parameters,iteration=i,MCMC_sds=MCMC_sds,proposal_type=proposal_type, cov_matrix=cov_matrix, ignored_pars=ignored_pars, ignored_spline_par=ignored_spline_par)
print(c("proposed parameters = ", proposed_parameters), quote=F)
#saveRDS(proposed_parameters, paste0("parameters_break_",form,".rds"))
#proposed_parameters <- readRDS("parameters_break.rds")
posterior_calc <- posterior(parameters=proposed_parameters, prior_mean, prior_cov_final, lower_bound, knots, vk, vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim, ignored_pars)
proposed_posterior <- posterior_calc[1]
proposed_likelihood <- posterior_calc[2]
#print(c("current posterior = ", current_posterior), quote=FALSE)
print(c("proposed posterior = ", proposed_posterior), quote=FALSE)
print(c("proposed likelihood = ", proposed_likelihood), quote=FALSE)
likelihood_ratio <- ifelse(proposed_posterior == -Inf || is.nan(proposed_posterior), 0, exp(proposed_posterior-current_posterior))
if(runif(1) < likelihood_ratio){
print("Accepted", quote=F)
MCMC_output[i+1,] <- proposed_parameters
MCMC_posteriors[i+1] <- proposed_posterior
MCMC_likelihoods[i+1] <- proposed_likelihood
Acceptances[i] <- 1
}
else{
print("Rejected", quote=F)
MCMC_output[i+1,] <- MCMC_output[i,]
Acceptances[i] <- 0
if(runif(1) < 0.01){
calc_posterior <- posterior(current_parameters, prior_mean, prior_cov_final, lower_bound, knots, vk, vg, max_day, population, data_array, test_pop, ncores, form, symp_delay_lim, ignored_pars)
MCMC_posteriors[i+1] <- calc_posterior[1]
MCMC_likelihoods[i+1] <- calc_posterior[2]
}
else{
MCMC_posteriors[i+1] <- MCMC_posteriors[i]
MCMC_likelihoods[i+1] <- MCMC_likelihoods[i]
}
}
print(c("Last accepted = ", max(which(Acceptances==1))), quote=F)
print(c("Acceptance rate =", round(sum(Acceptances[1:i], na.rm=T)/i,2)), quote=F)
if(i %% 5000 == 0){
Acceptances_vec <- vector(length=n_parameters)
for(j in 1:length(Acceptances_vec)){
Acceptances_param <- Acceptances[seq(j,i,n_parameters)]
n_accept_param <- sum(Acceptances_param, na.rm=T)
n_it_param <- length(Acceptances_param[is.na(Acceptances_param)==FALSE])
Acceptances_vec[j] <- n_accept_param/n_it_param
}
names(Acceptances_vec) <- names(parameters)
print(Acceptances_vec, quote=F)
saveRDS(list(MCMC_output=MCMC_output, MCMC_posteriors=MCMC_posteriors, MCMC_likelihoods=MCMC_likelihoods, Acceptances=Acceptances, cov_matrix=cov_matrix, time_vec=time_vec, x=x),
file=paste0(strain,"/",Sys.Date(),"_",strain,"_",format(i,scientific=F),     "_",gene,"_",form,"_",proposal_type,"_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_mult.rds"))
unlink(paste0(strain,"/",Sys.Date(),  "_",strain,"_",format(i-5000,scientific=F),"_",gene,"_",form,"_",proposal_type,"_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_mult.rds"))
unlink(paste0(strain,"/",Sys.Date(),  "_",strain,"_",format(i-10000,scientific=F),"_",gene,"_",form,"_",proposal_type,"_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_mult.rds"))
unlink(paste0(strain,"/",Sys.Date(),  "_",strain,"_",format(i-15000,scientific=F),"_",gene,"_",form,"_",proposal_type,"_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_mult.rds"))
unlink(paste0(strain,"/",Sys.Date(),  "_",strain,"_",format(i-5000,scientific=F),"_",gene,"_",form,"_MH",            "_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_mult.rds"))
unlink(paste0(strain,"/",Sys.Date()-1,"_",strain,"_",format(i-5000,scientific=F),"_",gene,"_",form,"_",proposal_type,"_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_mult.rds"))
}
print((proc.time()-p)["elapsed"])
time_vec[i] <- ((proc.time()-p)["elapsed"])
}
paste0(strain,"/",Sys.Date(),  "_",strain,"_",format(i-5000,scientific=F),"_",gene,"_",form,"_",proposal_type,"_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_mult.rds")
new_file_name
new_file_name <- paste0(strain,"/",Sys.Date(),"_",strain,"_",format(i,scientific=F),     "_",gene,"_",form,"_",proposal_type,"_ignored_",gsub(" ","",toString(ignored_pars)),"_",vl_kinetics_type,"_",tag,"vg=",vg,"_mult.rds")
new_file_name
?gsub
gsub(paste0("_",i-5000,"_",gene))
paste0("_",i-5000,"_",gene)
old_file_names <- gsub(paste0("_",i,"_",gene),paste0("_",i-5000,"_",gene), new_file_name)
old_file_names
gsub(paste0("_",i,"_",gene),paste0("_",i-15000,"_",gene), new_file_name)
paste0("_",i-5000,"_",gene)
gsub(c(paste0("_",i-5000,"_",gene),"Cov"), c(paste0("_",i,"_",gene),"MH"), new_file_name
gsub(c(paste0("_",i-5000,"_",gene),"Cov"), c(paste0("_",i,"_",gene),"MH"), new_file_name)
gsub(c(paste0("_",i-5000,"_",gene),"Cov"), c(paste0("_",i,"_",gene),"MH"), new_file_name)
task_log_show(M1)
pars_strain
pars_strain <- expand.grid(flat = c(0),
corr = c(3, 4, 5),
form = c("incidence", "peak", "thresh", "thresh_peak"), strain=c("wt", "alpha", "delta", "omicron")) %>%
mutate(cov_start = c(50000), form=as.character(form), strain=as.character(strain))
MCMC_facet <- MCMC_comparator(pars=pars_strain[37:48,], start=10000, thinning=0.01)
MCMC_plotter <- function(output){
n_it <- which(is.na(output$MCMC_output[,1])==TRUE)[1]-2
thinned_iter <- round(seq(1,n_it,length.out=10000))
combined <- cbind(iteration=thinned_iter, output$MCMC_output[thinned_iter,], posteriors=output$MCMC_posteriors[thinned_iter]) %>%
as.data.frame() %>% mutate(posteriors2 = ifelse(iteration < n_it/2, NA, posteriors))
variable_set <- c("viral", "theta", "other")
viral_params <- c("a_bar", "a_sigma", "b_bar", "b_sigma", "vl_max_bar", "vl_max_sigma", "inc1", "inc2", "inc3")
other_params <- c("test0", "test1", "test2", "test3", "test4", "test5", "rdisp", "posteriors", "posteriors2")
theta_params <- colnames(combined)[grepl("theta", colnames(combined))]
plot_list <- list()
for(i in 1:3){
filtered_combined <- combined[,c("iteration", get(paste0(variable_set[i],"_params")))] %>%
tidyr::gather(param, value, 2:ncol(.)) %>% mutate(param=factor(param, levels=colnames(combined)))
plot_list[[i]] <- ggplot(filtered_combined, aes(x=iteration, y=value)) +
geom_line() +
facet_wrap(~param, scales="free_y") +
theme_bw()
}
return(plot_list)
}
MCMC_comparator <- function(pars, start, thinning){
out <- data.frame(number=numeric(), row=numeric(), form=character(), corr=numeric(), flat=numeric(), posterior=numeric())
next_row <- 1
for(i in 1:nrow(pars)){
print(i)
output <- output_finder(strain=pars$strain[i], form=pars$form[i], corr=pars$corr[i], flat=pars$flat[i])
if(length(output)==1) next
n_it <- which(is.na(output$MCMC_posteriors))[1]-2
out_length <- round((n_it-start)*thinning)
out[next_row:(next_row+out_length-1),] = data.frame(number=i,
row=round(seq(start,n_it,length.out=out_length)),
form=pars$form[i],
corr=pars$corr[i],
flat=pars$flat[i],
posterior=output$MCMC_posteriors[round(seq(start,n_it,length.out=out_length))])
next_row=next_row+out_length
}
out$flat = ifelse(out$flat==0, "tri", "trap")
out$flat = factor(out$flat, levels=c("tri", "trap"))
p <- ggplot(out, aes(x=row, y=posterior)) +
geom_line() +
facet_nested(form ~ corr + flat, scales="free_x", labeller = label_wrap_gen(multi_line=FALSE), independent="x") +
theme_bw() +
scale_x_continuous(labels = scales::unit_format(unit = "", scale = 1e-3)) +
labs(x="Number of iterations (thousands)")
p2 <- ggplot(out, aes(x=row, y=posterior)) +
geom_line() +
facet_nested(form ~ flat + corr, scales="free", labeller = label_wrap_gen(multi_line=FALSE), independent="all") +
theme_bw() +
scale_x_continuous(labels = scales::unit_format(unit = "", scale = 1e-3)) +
labs(x="Number of iterations (thousands)")
ggsave("all/images/MCMC1.png", p, width=10, height=5)
ggsave("all/images/MCMC2.png", p2, width=10, height=5)
return(list(p, p2))
}
MCMC_facet <- MCMC_comparator(pars=pars_strain[37:48,], start=10000, thinning=0.01)
output_finder <- function(strain, form, corr, flat, recentness=1){
files <- list.files(strain)
form_filter = grepl(paste0("N_",form,"_Cov"), files) | grepl(paste0("N_",form,"_MH"), files)
#corr_filter = grepl(paste0("corr",corr), files)
flat_filter = grepl("flat", files)
vg_filter = grepl(paste0("vg=",corr), files)
mult_filter = grepl("mult", files)
#vg_filter = !grepl("vg", files)
if(flat==0) flat_filter <- !flat_filter
filtered_files <- files[which(form_filter*flat_filter*vg_filter*mult_filter==1)]
if(length(filtered_files)==0){
print("No file")
return("No file")
}
times <- file.info(paste0(strain,"/",filtered_files))$ctime
file_name <- paste0(strain, "/", filtered_files[which(times==sort(times, decreasing=T)[recentness])])
print(file_name, quote=F)
return(readRDS(file_name))
}
MCMC_facet <- MCMC_comparator(pars=pars_strain[37:48,], start=10000, thinning=0.01)
MCMC_facet <- MCMC_comparator(pars=pars_strain[37:48,], start=1000, thinning=0.05)
MCMC_facet[[1]]
MCMC_facet[[2]]
MCMC_facet <- MCMC_comparator(pars=pars_strain[37:48,], start=1000, thinning=0.05)
MCMC_facet <- MCMC_comparator(pars=pars_strain[1:12,], start=1000, thinning=0.05)
MCMC_facet[[1]]
MCMC_facet[[2]]
MCMC_facet <- MCMC_comparator(pars=pars_strain[13:24,], start=1000, thinning=0.05)
MCMC_facet[[1]]
MCMC_facet[[2]]
MCMC_facet <- MCMC_comparator(pars=pars_strain[25:36,], start=1000, thinning=0.05)
MCMC_facet[[1]]
MCMC_facet[[2]]
output_finder("alpha", "peak", corr=3, flat=0)
a <- output_finder("alpha", "peak", corr=3, flat=0)
a$MCMC_output[55000,]
